#ifndef __TEXTGLYPHS_H__
#define __TEXTGLYPHS_H__

#define TEXT_HEIGHT		(12)
#define TEXT_WIDTH		(8)
#define TEXT_SPACING	(2)
#define LINE_SPACING	(TEXT_SPACING+TEXT_HEIGHT+10)

typedef struct __attribute__((packed))
{
	uint8_t byte[TEXT_HEIGHT];
}bitmap_12x8_t;

#define NUM_GLYPHS (38)

const bitmap_12x8_t textGlyphs[NUM_GLYPHS] = {
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18},		// char '.' '(46)'
		{0x3c,0x7e,0x67,0xc3,0xc3,0xdb,0xdb,0xc3,0xc3,0x67,0x7e,0x3c},		// char '0' '(48)'
		{0x38,0x78,0x58,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0xff},		// char '1' '(49)'
		{0x7c,0xfe,0x83,0x03,0x03,0x06,0x0c,0x18,0x30,0x60,0xff,0xff},		// char '2' '(50)'
		{0x7c,0xfe,0x83,0x03,0x03,0x3e,0x3e,0x07,0x03,0x83,0xff,0x7c},		// char '3' '(51)'
		{0x0e,0x0e,0x1e,0x36,0x26,0x66,0xc6,0xff,0xff,0x06,0x06,0x06},		// char '4' '(52)'
		{0xfe,0xfe,0xc0,0xc0,0xfc,0xfe,0x87,0x03,0x03,0x87,0xfe,0x7c},		// char '5' '(53)'
		{0x3c,0x7e,0x62,0xc0,0xdc,0xfe,0xe7,0xc3,0xc3,0xe7,0x7e,0x3c},		// char '6' '(54)'
		{0xff,0xff,0x07,0x06,0x0e,0x0c,0x0c,0x18,0x18,0x30,0x30,0x60},		// char '7' '(55)'
		{0x3c,0x7e,0xc3,0xc3,0xc3,0x7e,0x7e,0xc3,0xc3,0xc3,0xff,0x3c},		// char '8' '(56)'
		{0x3c,0x7e,0xe7,0xc3,0xc3,0xe7,0x7f,0x3b,0x03,0x46,0x7e,0x3c},		// char '9' '(57)'
		{0x18,0x3c,0x3c,0x3c,0x3c,0x66,0x66,0x7e,0x7e,0x66,0xe7,0xc3},		// char 'A' '(65)'
		{0xfe,0xff,0xc3,0xc3,0xc3,0xfe,0xfe,0xc3,0xc3,0xc3,0xff,0xfe},		// char 'B' '(66)'
		{0x1e,0x7f,0x61,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x61,0x7f,0x1e},		// char 'C' '(67)'
		{0xf8,0xfe,0xc6,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc6,0xfe,0xf8},		// char 'D' '(68)'
		{0xff,0xff,0xc0,0xc0,0xc0,0xfe,0xfe,0xc0,0xc0,0xc0,0xff,0xff},		// char 'E' '(69)'
		{0xff,0xff,0xc0,0xc0,0xc0,0xfe,0xfe,0xc0,0xc0,0xc0,0xc0,0xc0},		// char 'F' '(70)'
		{0x1e,0x7f,0x61,0xc0,0xc0,0xc0,0xcf,0xcf,0xc3,0x63,0x7f,0x1e},		// char 'G' '(71)'
		{0xc3,0xc3,0xc3,0xc3,0xc3,0xff,0xff,0xc3,0xc3,0xc3,0xc3,0xc3},		// char 'H' '(72)'
		{0x7e,0x7e,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7e,0x7e},		// char 'I' '(73)'
		{0x1f,0x1f,0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x83,0xff,0x7c},		// char 'J' '(74)'
		{0xc7,0xce,0xcc,0xd8,0xf8,0xf8,0xf8,0xcc,0xce,0xc6,0xc7,0xc3},		// char 'K' '(75)'
		{0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xff,0xff},		// char 'L' '(76)'
		{0xe7,0xe7,0xe7,0xff,0xff,0xdb,0xdb,0xdb,0xc3,0xc3,0xc3,0xc3},		// char 'M' '(77)'
		{0xe3,0xe3,0xe3,0xf3,0xd3,0xdb,0xdb,0xcb,0xcf,0xc7,0xc7,0xc7},		// char 'N' '(78)'
		{0x3c,0x7e,0x66,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0x66,0x7e,0x3c},		// char 'O' '(79)'
		{0xfc,0xff,0xc3,0xc3,0xc3,0xff,0xfc,0xc0,0xc0,0xc0,0xc0,0xc0},		// char 'P' '(80)'
		{0x3c,0x7e,0x66,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0x67,0x7e,0x3c},		// char 'Q' '(81)'
		{0xfc,0xff,0xc3,0xc3,0xc3,0xfe,0xfe,0xce,0xc7,0xc3,0xc3,0xc3},		// char 'R' '(82)'
		{0x3c,0x7e,0xc2,0xc0,0xe0,0x7c,0x3e,0x07,0x03,0x83,0xff,0x7c},		// char 'S' '(83)'
		{0xff,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18},		// char 'T' '(84)'
		{0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xe7,0x7e,0x3c},		// char 'U' '(85)'
		{0xc3,0xe7,0x66,0x66,0x66,0x66,0x66,0x3c,0x3c,0x3c,0x3c,0x3c},		// char 'V' '(86)'
		{0x81,0x81,0x81,0x99,0xdb,0xdb,0xdb,0xdb,0xe7,0xe7,0xe7,0xe7},		// char 'W' '(87)'
		{0xe7,0x66,0x7e,0x3c,0x3c,0x18,0x18,0x3c,0x3c,0x66,0x66,0xe7},		// char 'X' '(88)'
		{0xc3,0xc3,0xe7,0x66,0x7e,0x3c,0x18,0x18,0x18,0x18,0x18,0x18},		// char 'Y' '(89)'
		{0xff,0xff,0x07,0x0e,0x0c,0x1c,0x38,0x30,0x70,0xe0,0xff,0xff},		// char 'Z' '(90)'
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},		// char ' ' '(32)'
};

#define GLYPHINDEX_WHITESPACE (NUM_GLYPHS)

uint8_t asciiToGlyphIndex(uint8_t ascii_val)
{
	if(ascii_val >= 97 && ascii_val <= 122)
		ascii_val -= (97-65);
	if(ascii_val >= 65 && ascii_val <= 90)
	{
		return ascii_val - 65 + 11;		// (minus) minimum (plus) offset in textGlyphs array
	}
	else if(ascii_val >= 48 && ascii_val <= 57)
	{
		return ascii_val - 48 + 1;		// (minus) minimum (plus) offset in textGlyphs array
	}
	else if(ascii_val == 32)
	{
		return GLYPHINDEX_WHITESPACE;
	}
	{
		return 0;	// display (period) for all unsupported characters
	}

}

void loadTextGlyph(bitmap_12x8_t* dst, uint8_t glyphIndex)
{
	for (uint8_t i = 0; i < TEXT_HEIGHT; i++)
	{
		dst->byte[i] = textGlyphs[glyphIndex].byte[i];
	}
}

#endif // __TEXTGLYPHS_H__
